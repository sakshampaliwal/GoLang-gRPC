go run *.go  //to run all go files 

go mod init command:

go mod init <module-name>ðŸ‘‡
Above command Initializes a new Go module in the current directory. It creates a go.mod file with the specified module path.

Go modules are a way of managing dependencies in Go projects.
When you use the go mod command to initialize a module (go mod init), you are essentially telling Go that your project may rely on external dependencies, and the go.mod file keeps track of these dependencies and their versions.
when we talk about managing dependencies in Go, we mean keeping track of external packages or libraries that your project needs to function, and Go modules provide a standardized way to do this.

History:
In the early versions of Go, there was a concept called GOPATH.
GOPATH was a directory where Go projects and their dependencies were stored.
To handle dependencies, developers often used a directory called vendor.
The vendor directory was manually created within the project and used to store copies of the project's dependencies.
This process lacked a standardized way to declare dependencies and versions, making it less convenient and more error-prone. Go modules were introduced to address these challenges, providing a more structured and automated approach to dependency management in Go projects.

When to Use:
Whenever you start a new Go project that utilizes external dependencies.
Before using dependency management commands like go get or go mod tidy.

go mod tidy:
It scans your project's codebase to determine which dependencies are actually being used.
After removing unused dependencies, go mod tidy updates both the go.mod and go.sum files to reflect the changes.
Why required:
Over time, as your project evolves, you might add, update, or remove dependencies.
Some dependencies that were once necessary might become obsolete or unused as your project's requirements change.

go build:
go build [flags] [packages]
When you run go build, Go compiler (go tool compile) is invoked to compile the Go source code files (*.go) in the current directory.
The compiler translates Go source code into machine code or platform-specific object files.
If your Go source code contains a main function (i.e., it's a main package), go build creates an executable binary file with the same name as the current directory (or with the name specified by the -o flag).
If your Go source code is not a main package (doesn't contain a main function), go build compiles the code into a package. The resulting package can be imported and used by other Go programs.
go build -o <output-file> //You can specify the name of the output file using the -o flag

go list -m all:
is used to list all modules, including dependencies, required by your project. 

go clean [flags]:
is used to remove object files and cached files generated by the Go build system.
When you compile Go source code using go build or go install, the Go compiler generates object files (with a .o extension) containing machine code.
go clean removes these object files from the current package's directory.
Go maintains a cache of built packages to speed up subsequent builds.
go clean can remove this cache, forcing a rebuild of packages when you next compile or install your project.
Flags:
-i: Remove the installed packages (i.e., remove the compiled binaries from the package's directory).
-r: Remove the cached packages and their dependencies recursively.
-cache: Remove the entire go build cache.
-modcache: Remove the module cache.

go mod download:
Downloads the modules specified in the go.mod file. This ensures that the necessary dependencies are available locally.

go get <package-name>:
provides a simple and convenient way to fetch and install external packages or dependencies in your Go projects.
Go downloads the package specified by <package-name> from a remote repository (usually from the official Go module mirror or another repository specified in the GOPROXY environment variable).
It fetches both the package's source code and its dependencies, if any.
After downloading the package and its dependencies, Go installs them in your Go workspace ($GOPATH) or in the go.mod file if you're using modules.
e.g: go get github.com/gorilla/mux
     go get -u <package-name>@<version> //for specific version

go env: to see environment variables